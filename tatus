[1mdiff --git a/lecturer/static/lecturer.css b/lecturer/static/lecturer.css[m
[1mindex edaafd6..2760328 100644[m
[1m--- a/lecturer/static/lecturer.css[m
[1m+++ b/lecturer/static/lecturer.css[m
[36m@@ -170,6 +170,10 @@[m [mfieldset[disabled] .btn-custom.active {[m
     top:0;[m
 }[m
 [m
[32m+[m[32m#question_list_top {[m
[32m+[m[32m  list-style-type: none;[m
[32m+[m[32m}[m
[32m+[m
 #cancel_change_lecture_title span {[m
     top:2px;[m
 }[m
[36m@@ -242,7 +246,7 @@[m [mfieldset[disabled] .btn-custom.active {[m
 }[m
 [m
 .list-group-item-custom:not(:first-child) {[m
[31m-    border-top: 1px solid #b4b4b4; [m
[32m+[m[32m    border-top: 1px solid #b4b4b4;[m
 }[m
 [m
 .bar-content {[m
[1mdiff --git a/lecturer/static/scripts/lecturer.js b/lecturer/static/scripts/lecturer.js[m
[1mindex bce40e2..ec47e4f 100644[m
[1m--- a/lecturer/static/scripts/lecturer.js[m
[1m+++ b/lecturer/static/scripts/lecturer.js[m
[36m@@ -398,6 +398,9 @@[m [mfunction populateRecentQuestionsLecturePage() {[m
           for (var i = 0; i < data.questions.length; i++) {[m
               var question = data.questions[i];[m
               var list_element = $("<li>");[m
[32m+[m[32m              list_element.attr({[m
[32m+[m[32m                  value: question.question_id,[m
[32m+[m[32m              })[m
               list_element.append(' ' + question.question_text);[m
               $("#question_list_recent").append(list_element);[m
           }[m
[36m@@ -416,15 +419,44 @@[m [mfunction populateTopQuestionsLecturePage() {[m
         if (data.success) {[m
           $("#question_list_top").empty();[m
           for (var i = 0; i < Math.min(5, data.questions.length); i++) {[m
[31m-              var question = data.questions[i];[m
[31m-              var list_element = $("<li>");[m
[31m-              list_element.append(' ' + question.question_text);[m
[31m-              $("#question_list_top").append(list_element);[m
[32m+[m[32m             var question = data.questions[i];[m
[32m+[m[32m             var list_element = $("<li>");[m
[32m+[m[32m             var upvote_button = $("<button>");[m
[32m+[m[32m             var glyphicon_up = $("<span>");[m
[32m+[m[32m             glyphicon_up.attr({[m
[32m+[m[32m                 class: 'glyphicon glyphicon-remove'[m
[32m+[m[32m             });[m
[32m+[m[32m             upvote_button.attr({[m
[32m+[m[32m                 type: 'button',[m
[32m+[m[32m                 class: 'upvote-button',[m
[32m+[m[32m                 onclick: 'activeQuestion.call(this)',[m
[32m+[m[32m                 value: question.question_id[m
[32m+[m[32m             });[m
[32m+[m[32m             upvote_button.append(glyphicon_up);[m
[32m+[m[32m             upvote_button.append(question.question_votes);[m
[32m+[m[32m             list_element.append(upvote_button);[m
[32m+[m[32m             list_element.append('- ' + question.question_text);[m
[32m+[m[32m             $("#question_list_top").append(list_element);[m
           }[m
         }[m
   });[m
 }[m
 [m
[32m+[m[32m/**[m
[32m+[m[32m * Changes Question Active status[m
[32m+[m[32m */[m
[32m+[m[32mfunction activeQuestion() {[m
[32m+[m[32m  var form_action = '/lectures/' + lecture_pin + '/questions/' + $(this).val() + '/active/';[m
[32m+[m[32m  csrfPOST(form_action, $("<form>"), function (data) {[m
[32m+[m[32m      console.log(data);[m
[32m+[m[32m      if (data.success) {[m
[32m+[m[32m          populateTopQuestionsLecturePage()[m
[32m+[m[32m          populateRecentQuestionsLecturePage()[m
[32m+[m[32m      }[m
[32m+[m[32m  });[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
 var current_topic_index = 0;[m
 [m
 /**[m
[1mdiff --git a/realback_api/api.py b/realback_api/api.py[m
[1mindex 3f97bdb..e08f3ab 100644[m
[1m--- a/realback_api/api.py[m
[1m+++ b/realback_api/api.py[m
[36m@@ -258,9 +258,11 @@[m [mclass LectureQuestions(View):[m
         url_param = request.GET[m
         sort_order = url_param.get('order', '')[m
         allowed_orders = {'votes': ['-votes', '-timestamp'], 'latest': ['-timestamp']}[m
[32m+[m[32m        allowed_filters = {'votes': {'lecture__pin': pin, 'active': True}, 'latest': {'lecture__pin': pin}}[m
[32m+[m[32m        query_filter = allowed_filters.get(sort_order, {'lecture__pin': pin, 'active': True})[m
         sort_order = allowed_orders.get(sort_order, ['-votes', '-timestamp'])[m
 [m
[31m-        question_list = models.Question.objects.filter(lecture__pin=pin).order_by(*sort_order)[m
[32m+[m[32m        question_list = models.Question.objects.filter(**query_filter).order_by(*sort_order)[m
 [m
         return JsonResponse({[m
             'success': True,[m
[1mdiff --git a/realback_api/urls.py b/realback_api/urls.py[m
[1mindex 4fa0fd8..d10346c 100644[m
[1m--- a/realback_api/urls.py[m
[1m+++ b/realback_api/urls.py[m
[36m@@ -17,6 +17,7 @@[m [murlpatterns = [[m
         url(r'^questions/(?P<question_id>[0-9]+)/', include([[m
 [m
             url(r'^vote/$', api.LectureQuestionVotes.as_view(), name='lecture_question_votes'),[m
[32m+[m[32m            url(r'^active/$', api.QuestionActive.as_view(), name='question_active'),[m
 [m
         ])),[m
         url(r'^pace/$', api.LecturePace.as_view(), name='lecture_pace'),[m
